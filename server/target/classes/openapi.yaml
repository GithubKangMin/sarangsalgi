openapi: 3.0.3
info:
  title: 사랑살기 API
  description: 대학생 참여형 고민 플랫폼 API
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: 개발 서버

paths:
  /api/concerns:
    post:
      tags:
        - Concerns
      summary: 고민 등록
      description: 학생이 고민을 등록합니다
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConcernRequest'
            example:
              studentId: "2024001234"
              name: "홍길동"
              category: "학업"
              title: "진로 고민"
              content: "졸업 후 진로에 대해 고민이 많습니다."
      responses:
        '201':
          description: 고민 등록 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcernResponse'
        '400':
          description: 입력 검증 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /api/topics:
    get:
      tags:
        - Topics
      summary: 토픽 목록 조회
      description: 모든 토픽을 최신순으로 조회합니다
      responses:
        '200':
          description: 토픽 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TopicResponse'

  /api/topics/{id}:
    get:
      tags:
        - Topics
      summary: 토픽 상세 조회
      description: 특정 토픽의 상세 정보를 조회합니다
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 토픽 상세 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicResponse'
        '404':
          description: 토픽을 찾을 수 없음

  /api/topics/{id}/answers:
    get:
      tags:
        - Topics
      summary: 토픽 답변 목록 조회
      description: 특정 토픽의 모든 답변을 최신순으로 조회합니다
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 답변 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnswerResponse'
    post:
      tags:
        - Topics
      summary: 답변 작성
      description: 특정 토픽에 답변을 작성합니다
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnswerRequest'
            example:
              studentId: "2024001234"
              name: "김학생"
              content: "좋은 질문이네요. 저는 이렇게 생각합니다..."
      responses:
        '201':
          description: 답변 작성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnswerResponse'

  /api/admin/login:
    post:
      tags:
        - Admin
      summary: 관리자 로그인
      description: 관리자 비밀번호로 로그인합니다
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLoginRequest'
            example:
              password: "admin123"
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "로그인 성공"

  /api/admin/logout:
    post:
      tags:
        - Admin
      summary: 관리자 로그아웃
      description: 관리자 세션을 종료합니다
      responses:
        '200':
          description: 로그아웃 성공

  /api/admin/session:
    get:
      tags:
        - Admin
      summary: 세션 상태 확인
      description: 현재 관리자 세션 상태를 확인합니다
      responses:
        '200':
          description: 세션 상태
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminSessionResponse'

  /api/admin/concerns:
    get:
      tags:
        - Admin
      summary: 고민 전체 조회
      description: 관리자가 모든 고민을 조회합니다 (검색/필터/정렬 지원)
      parameters:
        - name: q
          in: query
          description: 검색 키워드 (제목, 내용, 이름, 학번)
          schema:
            type: string
        - name: category
          in: query
          description: 카테고리 필터
          schema:
            $ref: '#/components/schemas/ConcernCategory'
        - name: sort
          in: query
          description: 정렬 방식
          schema:
            type: string
            enum: [latest, oldest]
            default: latest
      responses:
        '200':
          description: 고민 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  concerns:
                    type: array
                    items:
                      $ref: '#/components/schemas/ConcernResponse'
                  totalCount:
                    type: integer

components:
  schemas:
    ConcernCategory:
      type: string
      enum: [학업, 진로, 인간관계, 생활_재정, 건강_멘탈, 기타]

    ConcernRequest:
      type: object
      required:
        - studentId
        - category
        - content
      properties:
        studentId:
          type: string
          pattern: '^\d{8,10}$'
          maxLength: 16
          description: 학번 (8-10자리 숫자)
        name:
          type: string
          maxLength: 20
          description: 이름 (선택)
        category:
          $ref: '#/components/schemas/ConcernCategory'
        title:
          type: string
          maxLength: 100
          description: 제목 (선택)
        content:
          type: string
          maxLength: 2000
          description: 내용

    ConcernResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        studentId:
          type: string
        name:
          type: string
        category:
          $ref: '#/components/schemas/ConcernCategory'
        title:
          type: string
        content:
          type: string
        createdAt:
          type: string
          format: date-time

    TopicRequest:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
          maxLength: 100
        content:
          type: string
          maxLength: 2000

    TopicResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        answersCount:
          type: integer
          format: int64
        lastUpdatedAt:
          type: string
          format: date-time

    AnswerRequest:
      type: object
      required:
        - studentId
        - content
      properties:
        studentId:
          type: string
          pattern: '^\d{8,10}$'
          maxLength: 16
        name:
          type: string
          maxLength: 20
        content:
          type: string
          maxLength: 2000

    AnswerResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        topicId:
          type: string
          format: uuid
        studentId:
          type: string
        name:
          type: string
        content:
          type: string
        createdAt:
          type: string
          format: date-time

    AdminLoginRequest:
      type: object
      required:
        - password
      properties:
        password:
          type: string

    AdminSessionResponse:
      type: object
      properties:
        loggedIn:
          type: boolean
        expiresAt:
          type: string
          format: date-time

    ValidationError:
      type: object
      properties:
        error:
          type: string
        details:
          type: object
          additionalProperties:
            type: string