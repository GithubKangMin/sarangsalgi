services:
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    image: sarangsalgi-frontend:latest
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://localhost:8080
    command: npm run dev
    restart: unless-stopped

  backend:
    # Apple Silicon(M1/M2)에서 amd64 이미지가 필요하면 주석 해제
    # platform: linux/amd64

    build:
      context: .
      dockerfile: Dockerfile
    image: sarangsalgi-app:latest

    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"

    environment:
      SPRING_PROFILES_ACTIVE: docker
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin123}
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/sarangsalgi
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-sarangsalgi}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-sarangsalgi123}

    volumes:
      - app_logs:/app/logs
      - upload_files:/app/uploads
      # 실제 인증서 경로가 로컬에 존재해야 합니다.
      - /etc/letsencrypt/live/yourdomain.com/fullchain.pem:/etc/ssl/certs/cert.pem:ro
      - /etc/letsencrypt/live/yourdomain.com/privkey.pem:/etc/ssl/private/key.pem:ro

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

    restart: unless-stopped

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: sarangsalgi-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      # 환경변수 사용자명을 사용하도록 수정
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:
  app_logs:
  upload_files: