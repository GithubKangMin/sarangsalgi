name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '17'

jobs:
  build-and-test:
    name: Build & Compile Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v5
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './client/package-lock.json'

    - name: Build backend (compilation check)
      working-directory: ./server
      run: ./mvnw clean compile

    - name: Build frontend (TypeScript check)
      working-directory: ./client
      run: |
        npm ci
        npm run build

    - name: Package backend
      working-directory: ./server
      run: ./mvnw package -DskipTests

    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: ./server/target/*.jar

    - name: Upload frontend artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: ./client/dist

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Download backend artifact
      uses: actions/download-artifact@v4
      with:
        name: backend-jar
        path: ./artifacts

    - name: Download frontend artifact
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: ./artifacts/frontend

    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "Backend JAR: $(ls ./artifacts/*.jar)"
        echo "Frontend build: $(ls ./artifacts/frontend/)"
        # Ïã§Ï†ú Î∞∞Ìè¨ Ïä§ÌÅ¨Î¶ΩÌä∏Îäî Ïó¨Í∏∞Ïóê Ï∂îÍ∞Ä

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Download backend artifact
      uses: actions/download-artifact@v4
      with:
        name: backend-jar
        path: ./artifacts

    - name: Download frontend artifact
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: ./artifacts/frontend

    - name: Deploy to production
      run: |
        echo "üéâ Deploying to production environment..."
        echo "Backend JAR: $(ls ./artifacts/*.jar)"
        echo "Frontend build: $(ls ./artifacts/frontend/)"
        # Ïã§Ï†ú Î∞∞Ìè¨ Ïä§ÌÅ¨Î¶ΩÌä∏Îäî Ïó¨Í∏∞Ïóê Ï∂îÍ∞Ä